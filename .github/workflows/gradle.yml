name: Java CI

on:
  push:
    branches:
      - master
      - 'feature*'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # fetch full history for blame info

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew || true

      - name: Build with Gradle
        run: ./gradlew clean build sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_OPTS: "-Xmx2048m"

      - name: Upload Gradle Problems Report (if exists)
        if: always()  # ensures it runs even if build fails
        uses: actions/upload-artifact@v4
        with:
          name: gradle-problems-report
          path: build/reports/problems/problems-report.html
      - name: Print Full Gradle Problems Report
        if: always()
        run: |
          REPORT=build/reports/problems/problems-report.html
          if [ -f "$REPORT" ]; then
            echo "---- Gradle Problems (Raw Extract) ----"
            # Extract all problem blocks with context
            awk '/<div class="problem"/,/<\/div>/' "$REPORT" \
              | sed -E 's/<[^>]+>//g' \
              | sed '/^\s*$/d'
          else
            echo "No problems-report.html file found."
          fi
      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: build/test-results/test
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-



